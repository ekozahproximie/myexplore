package com.trimble.vilicus.entity;

import com.trimble.vilicus.dao.DaoSession;

import de.greenrobot.dao.DaoException;

import com.trimble.vilicus.dao.AssetDao;
import com.trimble.vilicus.dao.UserDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table ASSET.
 */
public class Asset {

    private Long id;
    private String name;
    private String type;
    private String make;
    private Double heading;
    private Integer iconID;
    private Double speed;
    private Double latitude;
    private Double longitude;
    private String status;
    private java.util.Date updatedUTC;
    private Long userid;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient AssetDao myDao;

    private User user;
    private Long user__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Asset() {
    }

    public Asset(Long id) {
        this.id = id;
    }

    public Asset(Long id, String name, String type, String make, Double heading, Integer iconID, Double speed, Double latitude, Double longitude, String status, java.util.Date updatedUTC, Long userid) {
        this.id = id;
        this.name = name;
        this.type = type;
        this.make = make;
        this.heading = heading;
        this.iconID = iconID;
        this.speed = speed;
        this.latitude = latitude;
        this.longitude = longitude;
        this.status = status;
        this.updatedUTC = updatedUTC;
        this.userid = userid;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getAssetDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public String getMake() {
        return make;
    }

    public void setMake(String make) {
        this.make = make;
    }

    public Double getHeading() {
        return heading;
    }

    public void setHeading(Double heading) {
        this.heading = heading;
    }

    public Integer getIconID() {
        return iconID;
    }

    public void setIconID(Integer iconID) {
        this.iconID = iconID;
    }

    public Double getSpeed() {
        return speed;
    }

    public void setSpeed(Double speed) {
        this.speed = speed;
    }

    public Double getLatitude() {
        return latitude;
    }

    public void setLatitude(Double latitude) {
        this.latitude = latitude;
    }

    public Double getLongitude() {
        return longitude;
    }

    public void setLongitude(Double longitude) {
        this.longitude = longitude;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public java.util.Date getUpdatedUTC() {
        return updatedUTC;
    }

    public void setUpdatedUTC(java.util.Date updatedUTC) {
        this.updatedUTC = updatedUTC;
    }

    public Long getUserid() {
        return userid;
    }

    public void setUserid(Long userid) {
        this.userid = userid;
    }

    /** To-one relationship, resolved on first access. */
    public User getUser() {
        if (user__resolvedKey == null || !user__resolvedKey.equals(userid)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserDao targetDao = daoSession.getUserDao();
            user = targetDao.load(userid);
            user__resolvedKey = userid;
        }
        return user;
    }

    public void setUser(User user) {
        this.user = user;
        userid = user == null ? null : user.getUserid();
        user__resolvedKey = userid;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    @Override
   public String toString() {
    
      return name+","+status+","+type;
   }
    // KEEP METHODS END

}
