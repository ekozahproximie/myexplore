package com.trimble.vilicus.dao;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.IdentityScopeType;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * Master of DAO (schema version 1): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
   
   public static final int INIT_VERSION = 1;
   /*
    * CFFE and boundary support added
    */
   public static final int SECOND_VERSION = 2;
   
    public static final int SCHEMA_VERSION = INIT_VERSION;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists,int schema_version) {
       switch (schema_version) {
         case INIT_VERSION:
            createInitVersionTables(db, ifNotExists);
            break;
        
         default:
            break;
      }
        
    }
    
    private static void createInitVersionTables(SQLiteDatabase db, boolean ifNotExists){
       OrganizationDao.createTable(db, ifNotExists);
       UserDao.createTable(db, ifNotExists);
       
       AssetDao.createTable(db, ifNotExists);
      
    }
    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        OrganizationDao.dropTable(db, ifExists);
        UserDao.dropTable(db, ifExists);
        AssetDao.dropTable(db, ifExists);
        
    }
    
    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false,SCHEMA_VERSION);
        }
    }
    private static final String TAG = DaoMaster.class.getSimpleName();
    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
       
       private transient boolean isDBUpdated=false;
        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
           
        }
        
      /**
       * @return the isDBUpdated
       */
      public boolean isDBUpdated() {
         return isDBUpdated;
      }
    }

    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(OrganizationDao.class);
        registerDaoClass(UserDao.class);
      
        registerDaoClass(AssetDao.class);
        
    }
    
    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }
    
    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }
    
}
