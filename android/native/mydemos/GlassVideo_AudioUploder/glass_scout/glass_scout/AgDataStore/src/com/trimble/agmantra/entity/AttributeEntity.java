package com.trimble.agmantra.entity;

import com.trimble.agmantra.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.trimble.agmantra.dao.AttributeEntityDao;
import com.trimble.agmantra.dao.AttributeInfoEntityDao;
import com.trimble.agmantra.dao.FeatureDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table ATTRIBUTE_ENTITY.
 */
public class AttributeEntity {

    private Long id;
    private String value;
    private Long featureId;
    private Long attributeInfoId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient AttributeEntityDao myDao;

    private Feature feature;
    private Long feature__resolvedKey;

    private AttributeInfoEntity attributeInfoEntity;
    private Long attributeInfoEntity__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public AttributeEntity() {
    }

    public AttributeEntity(Long id) {
        this.id = id;
    }

    public AttributeEntity(Long id, String value, Long featureId, Long attributeInfoId) {
        this.id = id;
        this.value = value;
        this.featureId = featureId;
        this.attributeInfoId = attributeInfoId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getAttributeEntityDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getValue() {
        return value;
    }

    public void setValue(String value) {
        this.value = value;
    }

    public Long getFeatureId() {
        return featureId;
    }

    public void setFeatureId(Long featureId) {
        this.featureId = featureId;
    }

    public Long getAttributeInfoId() {
        return attributeInfoId;
    }

    public void setAttributeInfoId(Long attributeInfoId) {
        this.attributeInfoId = attributeInfoId;
    }

    /** To-one relationship, resolved on first access. */
    public Feature getFeature() {
        if (feature__resolvedKey == null || !feature__resolvedKey.equals(featureId)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            FeatureDao targetDao = daoSession.getFeatureDao();
            feature = targetDao.load(featureId);
            feature__resolvedKey = featureId;
        }
        return feature;
    }

    public void setFeature(Feature feature) {
        this.feature = feature;
        featureId = feature == null ? null : feature.getId();
        feature__resolvedKey = featureId;
    }

    /** To-one relationship, resolved on first access. */
    public AttributeInfoEntity getAttributeInfoEntity() {
        if (attributeInfoEntity__resolvedKey == null || !attributeInfoEntity__resolvedKey.equals(attributeInfoId)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AttributeInfoEntityDao targetDao = daoSession.getAttributeInfoEntityDao();
            attributeInfoEntity = targetDao.load(attributeInfoId);
            attributeInfoEntity__resolvedKey = attributeInfoId;
        }
        return attributeInfoEntity;
    }

    public void setAttributeInfoEntity(AttributeInfoEntity attributeInfoEntity) {
        this.attributeInfoEntity = attributeInfoEntity;
        attributeInfoId = attributeInfoEntity == null ? null : attributeInfoEntity.getId();
        attributeInfoEntity__resolvedKey = attributeInfoId;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
