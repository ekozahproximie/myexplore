package com.trimble.agmantra.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.SqlUtils;

import com.trimble.agmantra.entity.FeatureType;
import com.trimble.agmantra.entity.Field;

import com.trimble.agmantra.entity.Feature;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table FEATURE.
*/
public class FeatureDao extends AbstractDao<Feature, Long> {

    public static final String TABLENAME = "FEATURE";

    /**
     * Properties of entity Feature.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Area = new Property(1, Long.class, "area", false, "AREA");
        public final static Property Color = new Property(2, Long.class, "color", false, "COLOR");
        public final static Property Thickness = new Property(3, Integer.class, "thickness", false, "THICKNESS");
        public final static Property Perimeter = new Property(4, Long.class, "perimeter", false, "PERIMETER");
        public final static Property Vertex = new Property(5, byte[].class, "vertex", false, "VERTEX");
        public final static Property BottomRightX = new Property(6, Integer.class, "bottomRightX", false, "BOTTOM_RIGHT_X");
        public final static Property BottomRightY = new Property(7, Integer.class, "bottomRightY", false, "BOTTOM_RIGHT_Y");
        public final static Property TopLeftX = new Property(8, Integer.class, "topLeftX", false, "TOP_LEFT_X");
        public final static Property TopLeftY = new Property(9, Integer.class, "topLeftY", false, "TOP_LEFT_Y");
        public final static Property FeatureTypeId = new Property(10, Long.class, "featureTypeId", false, "FEATURE_TYPE_ID");
        public final static Property FieldId = new Property(11, Long.class, "fieldId", false, "FIELD_ID");
    };

    private DaoSession daoSession;


    public FeatureDao(DaoConfig config) {
        super(config);
    }
    
    public FeatureDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'FEATURE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'AREA' INTEGER," + // 1: area
                "'COLOR' INTEGER," + // 2: color
                "'THICKNESS' INTEGER," + // 3: thickness
                "'PERIMETER' INTEGER," + // 4: perimeter
                "'VERTEX' BLOB," + // 5: vertex
                "'BOTTOM_RIGHT_X' INTEGER," + // 6: bottomRightX
                "'BOTTOM_RIGHT_Y' INTEGER," + // 7: bottomRightY
                "'TOP_LEFT_X' INTEGER," + // 8: topLeftX
                "'TOP_LEFT_Y' INTEGER," + // 9: topLeftY
                "'FEATURE_TYPE_ID' INTEGER," + // 10: featureTypeId
                "'FIELD_ID' INTEGER);"); // 11: fieldId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FEATURE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Feature entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long area = entity.getArea();
        if (area != null) {
            stmt.bindLong(2, area);
        }
 
        Long color = entity.getColor();
        if (color != null) {
            stmt.bindLong(3, color);
        }
 
        Integer thickness = entity.getThickness();
        if (thickness != null) {
            stmt.bindLong(4, thickness);
        }
 
        Long perimeter = entity.getPerimeter();
        if (perimeter != null) {
            stmt.bindLong(5, perimeter);
        }
 
        byte[] vertex = entity.getVertex();
        if (vertex != null) {
            stmt.bindBlob(6, vertex);
        }
 
        Integer bottomRightX = entity.getBottomRightX();
        if (bottomRightX != null) {
            stmt.bindLong(7, bottomRightX);
        }
 
        Integer bottomRightY = entity.getBottomRightY();
        if (bottomRightY != null) {
            stmt.bindLong(8, bottomRightY);
        }
 
        Integer topLeftX = entity.getTopLeftX();
        if (topLeftX != null) {
            stmt.bindLong(9, topLeftX);
        }
 
        Integer topLeftY = entity.getTopLeftY();
        if (topLeftY != null) {
            stmt.bindLong(10, topLeftY);
        }
 
        Long featureTypeId = entity.getFeatureTypeId();
        if (featureTypeId != null) {
            stmt.bindLong(11, featureTypeId);
        }
 
        Long fieldId = entity.getFieldId();
        if (fieldId != null) {
            stmt.bindLong(12, fieldId);
        }
    }

    @Override
    protected void attachEntity(Feature entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Feature readEntity(Cursor cursor, int offset) {
        Feature entity = new Feature( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // area
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // color
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // thickness
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // perimeter
            cursor.isNull(offset + 5) ? null : cursor.getBlob(offset + 5), // vertex
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // bottomRightX
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // bottomRightY
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // topLeftX
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // topLeftY
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // featureTypeId
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11) // fieldId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Feature entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setArea(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setColor(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setThickness(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setPerimeter(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setVertex(cursor.isNull(offset + 5) ? null : cursor.getBlob(offset + 5));
        entity.setBottomRightX(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setBottomRightY(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setTopLeftX(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setTopLeftY(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setFeatureTypeId(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setFieldId(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Feature entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Feature entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getFeatureTypeDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getFieldDao().getAllColumns());
            builder.append(" FROM FEATURE T");
            builder.append(" LEFT JOIN FEATURE_TYPE T0 ON T.'FEATURE_TYPE_ID'=T0.'_id'");
            builder.append(" LEFT JOIN FIELD T1 ON T.'FIELD_ID'=T1.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Feature loadCurrentDeep(Cursor cursor, boolean lock) {
        Feature entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        FeatureType featureType = loadCurrentOther(daoSession.getFeatureTypeDao(), cursor, offset);
        entity.setFeatureType(featureType);
        offset += daoSession.getFeatureTypeDao().getAllColumns().length;

        Field field = loadCurrentOther(daoSession.getFieldDao(), cursor, offset);
        entity.setField(field);

        return entity;    
    }

    public Feature loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Feature> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Feature> list = new ArrayList<Feature>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Feature> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Feature> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
