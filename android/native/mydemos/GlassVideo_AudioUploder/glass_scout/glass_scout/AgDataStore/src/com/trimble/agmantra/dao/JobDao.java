package com.trimble.agmantra.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import com.trimble.agmantra.entity.Job;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table JOB.
*/
public class JobDao extends AbstractDao<Job, Long> {

    public static final String TABLENAME = "JOB";

    /**
     * Properties of entity Job.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Starttime = new Property(1, java.util.Date.class, "starttime", false, "STARTTIME");
        public final static Property Endtime = new Property(2, java.util.Date.class, "endtime", false, "ENDTIME");
        public final static Property Jobfilepath = new Property(3, String.class, "jobfilepath", false, "JOBFILEPATH");
        public final static Property Status = new Property(4, Integer.class, "status", false, "STATUS");
    };


    public JobDao(DaoConfig config) {
        super(config);
    }
    
    public JobDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'JOB' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'STARTTIME' INTEGER," + // 1: starttime
                "'ENDTIME' INTEGER," + // 2: endtime
                "'JOBFILEPATH' TEXT," + // 3: jobfilepath
                "'STATUS' INTEGER);"); // 4: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'JOB'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Job entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date starttime = entity.getStarttime();
        if (starttime != null) {
            stmt.bindLong(2, starttime.getTime());
        }
 
        java.util.Date endtime = entity.getEndtime();
        if (endtime != null) {
            stmt.bindLong(3, endtime.getTime());
        }
 
        String jobfilepath = entity.getJobfilepath();
        if (jobfilepath != null) {
            stmt.bindString(4, jobfilepath);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(5, status);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Job readEntity(Cursor cursor, int offset) {
        Job entity = new Job( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // starttime
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // endtime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // jobfilepath
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4) // status
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Job entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStarttime(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setEndtime(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setJobfilepath(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStatus(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Job entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Job entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
