package com.trimble.agmantra.entity;

import com.trimble.agmantra.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.trimble.agmantra.dao.JobDao;
import com.trimble.agmantra.dao.JobtimingDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table JOBTIMING.
 */
public class Jobtiming {

    private Long id;
    private java.util.Date pauseTime;
    private java.util.Date resumeTime;
    private Integer status;
    private Long jobId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient JobtimingDao myDao;

    private Job job;
    private Long job__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Jobtiming() {
    }

    public Jobtiming(Long id) {
        this.id = id;
    }

    public Jobtiming(Long id, java.util.Date pauseTime, java.util.Date resumeTime, Integer status, Long jobId) {
        this.id = id;
        this.pauseTime = pauseTime;
        this.resumeTime = resumeTime;
        this.status = status;
        this.jobId = jobId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getJobtimingDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public java.util.Date getPauseTime() {
        return pauseTime;
    }

    public void setPauseTime(java.util.Date pauseTime) {
        this.pauseTime = pauseTime;
    }

    public java.util.Date getResumeTime() {
        return resumeTime;
    }

    public void setResumeTime(java.util.Date resumeTime) {
        this.resumeTime = resumeTime;
    }

    public Integer getStatus() {
        return status;
    }

    public void setStatus(Integer status) {
        this.status = status;
    }

    public Long getJobId() {
        return jobId;
    }

    public void setJobId(Long jobId) {
        this.jobId = jobId;
    }

    /** To-one relationship, resolved on first access. */
    public Job getJob() {
        if (job__resolvedKey == null || !job__resolvedKey.equals(jobId)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            JobDao targetDao = daoSession.getJobDao();
            job = targetDao.load(jobId);
            job__resolvedKey = jobId;
        }
        return job;
    }

    public void setJob(Job job) {
        this.job = job;
        jobId = job == null ? null : job.getId();
        job__resolvedKey = jobId;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
