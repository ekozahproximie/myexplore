package com.trimble.agmantra.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import com.trimble.agmantra.entity.Supply;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SUPPLY.
*/
public class SupplyDao extends AbstractDao<Supply, Long> {

    public static final String TABLENAME = "SUPPLY";

    /**
     * Properties of entity Supply.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CarrierRate = new Property(1, Integer.class, "carrierRate", false, "CARRIER_RATE");
        public final static Property ChemicalReaction = new Property(2, Integer.class, "chemicalReaction", false, "CHEMICAL_REACTION");
        public final static Property LastRate = new Property(3, Integer.class, "lastRate", false, "LAST_RATE");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property Pest = new Property(5, String.class, "pest", false, "PEST");
        public final static Property RestrictedUse = new Property(6, Integer.class, "restrictedUse", false, "RESTRICTED_USE");
        public final static Property Status = new Property(7, Integer.class, "status", false, "STATUS");
        public final static Property Type = new Property(8, Integer.class, "type", false, "TYPE");
        public final static Property UnitConv = new Property(9, Integer.class, "unitConv", false, "UNIT_CONV");
    };


    public SupplyDao(DaoConfig config) {
        super(config);
    }
    
    public SupplyDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SUPPLY' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'CARRIER_RATE' INTEGER," + // 1: carrierRate
                "'CHEMICAL_REACTION' INTEGER," + // 2: chemicalReaction
                "'LAST_RATE' INTEGER," + // 3: lastRate
                "'NAME' TEXT," + // 4: name
                "'PEST' TEXT," + // 5: pest
                "'RESTRICTED_USE' INTEGER," + // 6: restrictedUse
                "'STATUS' INTEGER," + // 7: status
                "'TYPE' INTEGER," + // 8: type
                "'UNIT_CONV' INTEGER);"); // 9: unitConv
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SUPPLY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Supply entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer carrierRate = entity.getCarrierRate();
        if (carrierRate != null) {
            stmt.bindLong(2, carrierRate);
        }
 
        Integer chemicalReaction = entity.getChemicalReaction();
        if (chemicalReaction != null) {
            stmt.bindLong(3, chemicalReaction);
        }
 
        Integer lastRate = entity.getLastRate();
        if (lastRate != null) {
            stmt.bindLong(4, lastRate);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String pest = entity.getPest();
        if (pest != null) {
            stmt.bindString(6, pest);
        }
 
        Integer restrictedUse = entity.getRestrictedUse();
        if (restrictedUse != null) {
            stmt.bindLong(7, restrictedUse);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(8, status);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(9, type);
        }
 
        Integer unitConv = entity.getUnitConv();
        if (unitConv != null) {
            stmt.bindLong(10, unitConv);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Supply readEntity(Cursor cursor, int offset) {
        Supply entity = new Supply( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // carrierRate
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // chemicalReaction
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // lastRate
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // pest
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // restrictedUse
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // status
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // type
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9) // unitConv
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Supply entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCarrierRate(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setChemicalReaction(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setLastRate(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPest(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRestrictedUse(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setStatus(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setType(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setUnitConv(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Supply entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Supply entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
