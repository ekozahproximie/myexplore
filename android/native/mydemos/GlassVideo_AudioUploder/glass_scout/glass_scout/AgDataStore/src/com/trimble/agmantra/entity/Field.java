package com.trimble.agmantra.entity;

import com.trimble.agmantra.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.trimble.agmantra.dao.FarmDao;
import com.trimble.agmantra.dao.FieldDao;
import com.trimble.agmantra.dao.UnitsDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table FIELD.
 */
public class Field {

    private Long id;
    private String desc;
    private Boolean isServerdata;
    private String area;
    private Integer boundaryModified;
    private Integer boundaryRevision;
    private Integer bottomRightX;
    private Integer bottomRightY;
    private Integer topLeftX;
    private Integer topLeftY;
    private Integer locked;
    private Integer deleted;
    private Integer status;
    private Long farmId;
    private Long unitId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient FieldDao myDao;

    private Farm farm;
    private Long farm__resolvedKey;

    private Units units;
    private Long units__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Field() {
    }

    public Field(Long id) {
        this.id = id;
    }

    public Field(Long id, String desc, Boolean isServerdata, String area, Integer boundaryModified, Integer boundaryRevision, Integer bottomRightX, Integer bottomRightY, Integer topLeftX, Integer topLeftY, Integer locked, Integer deleted, Integer status, Long farmId, Long unitId) {
        this.id = id;
        this.desc = desc;
        this.isServerdata = isServerdata;
        this.area = area;
        this.boundaryModified = boundaryModified;
        this.boundaryRevision = boundaryRevision;
        this.bottomRightX = bottomRightX;
        this.bottomRightY = bottomRightY;
        this.topLeftX = topLeftX;
        this.topLeftY = topLeftY;
        this.locked = locked;
        this.deleted = deleted;
        this.status = status;
        this.farmId = farmId;
        this.unitId = unitId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getFieldDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getDesc() {
        return desc;
    }

    public void setDesc(String desc) {
        this.desc = desc;
    }

    public Boolean getIsServerdata() {
        return isServerdata;
    }

    public void setIsServerdata(Boolean isServerdata) {
        this.isServerdata = isServerdata;
    }

    public String getArea() {
        return area;
    }

    public void setArea(String area) {
        this.area = area;
    }

    public Integer getBoundaryModified() {
        return boundaryModified;
    }

    public void setBoundaryModified(Integer boundaryModified) {
        this.boundaryModified = boundaryModified;
    }

    public Integer getBoundaryRevision() {
        return boundaryRevision;
    }

    public void setBoundaryRevision(Integer boundaryRevision) {
        this.boundaryRevision = boundaryRevision;
    }

    public Integer getBottomRightX() {
        return bottomRightX;
    }

    public void setBottomRightX(Integer bottomRightX) {
        this.bottomRightX = bottomRightX;
    }

    public Integer getBottomRightY() {
        return bottomRightY;
    }

    public void setBottomRightY(Integer bottomRightY) {
        this.bottomRightY = bottomRightY;
    }

    public Integer getTopLeftX() {
        return topLeftX;
    }

    public void setTopLeftX(Integer topLeftX) {
        this.topLeftX = topLeftX;
    }

    public Integer getTopLeftY() {
        return topLeftY;
    }

    public void setTopLeftY(Integer topLeftY) {
        this.topLeftY = topLeftY;
    }

    public Integer getLocked() {
        return locked;
    }

    public void setLocked(Integer locked) {
        this.locked = locked;
    }

    public Integer getDeleted() {
        return deleted;
    }

    public void setDeleted(Integer deleted) {
        this.deleted = deleted;
    }

    public Integer getStatus() {
        return status;
    }

    public void setStatus(Integer status) {
        this.status = status;
    }

    public Long getFarmId() {
        return farmId;
    }

    public void setFarmId(Long farmId) {
        this.farmId = farmId;
    }

    public Long getUnitId() {
        return unitId;
    }

    public void setUnitId(Long unitId) {
        this.unitId = unitId;
    }

    /** To-one relationship, resolved on first access. */
    public Farm getFarm() {
        if (farm__resolvedKey == null || !farm__resolvedKey.equals(farmId)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            FarmDao targetDao = daoSession.getFarmDao();
            farm = targetDao.load(farmId);
            farm__resolvedKey = farmId;
        }
        return farm;
    }

    public void setFarm(Farm farm) {
        this.farm = farm;
        farmId = farm == null ? null : farm.getId();
        farm__resolvedKey = farmId;
    }

    /** To-one relationship, resolved on first access. */
    public Units getUnits() {
        if (units__resolvedKey == null || !units__resolvedKey.equals(unitId)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UnitsDao targetDao = daoSession.getUnitsDao();
            units = targetDao.load(unitId);
            units__resolvedKey = unitId;
        }
        return units;
    }

    public void setUnits(Units units) {
        this.units = units;
        unitId = units == null ? null : units.getId();
        units__resolvedKey = unitId;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
