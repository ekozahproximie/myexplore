package com.trimble.agmantra.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.SqlUtils;

import com.trimble.agmantra.entity.Farm;
import com.trimble.agmantra.entity.Units;

import com.trimble.agmantra.entity.Field;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table FIELD.
*/
public class FieldDao extends AbstractDao<Field, Long> {

    public static final String TABLENAME = "FIELD";

    /**
     * Properties of entity Field.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Desc = new Property(1, String.class, "desc", false, "DESC");
        public final static Property IsServerdata = new Property(2, Boolean.class, "isServerdata", false, "IS_SERVERDATA");
        public final static Property Area = new Property(3, String.class, "area", false, "AREA");
        public final static Property BoundaryModified = new Property(4, Integer.class, "boundaryModified", false, "BOUNDARY_MODIFIED");
        public final static Property BoundaryRevision = new Property(5, Integer.class, "boundaryRevision", false, "BOUNDARY_REVISION");
        public final static Property BottomRightX = new Property(6, Integer.class, "bottomRightX", false, "BOTTOM_RIGHT_X");
        public final static Property BottomRightY = new Property(7, Integer.class, "bottomRightY", false, "BOTTOM_RIGHT_Y");
        public final static Property TopLeftX = new Property(8, Integer.class, "topLeftX", false, "TOP_LEFT_X");
        public final static Property TopLeftY = new Property(9, Integer.class, "topLeftY", false, "TOP_LEFT_Y");
        public final static Property Locked = new Property(10, Integer.class, "locked", false, "LOCKED");
        public final static Property Deleted = new Property(11, Integer.class, "deleted", false, "DELETED");
        public final static Property Status = new Property(12, Integer.class, "status", false, "STATUS");
        public final static Property FarmId = new Property(13, Long.class, "farmId", false, "FARM_ID");
        public final static Property UnitId = new Property(14, Long.class, "unitId", false, "UNIT_ID");
    };

    private DaoSession daoSession;


    public FieldDao(DaoConfig config) {
        super(config);
    }
    
    public FieldDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'FIELD' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'DESC' TEXT," + // 1: desc
                "'IS_SERVERDATA' INTEGER," + // 2: isServerdata
                "'AREA' TEXT," + // 3: area
                "'BOUNDARY_MODIFIED' INTEGER," + // 4: boundaryModified
                "'BOUNDARY_REVISION' INTEGER," + // 5: boundaryRevision
                "'BOTTOM_RIGHT_X' INTEGER," + // 6: bottomRightX
                "'BOTTOM_RIGHT_Y' INTEGER," + // 7: bottomRightY
                "'TOP_LEFT_X' INTEGER," + // 8: topLeftX
                "'TOP_LEFT_Y' INTEGER," + // 9: topLeftY
                "'LOCKED' INTEGER," + // 10: locked
                "'DELETED' INTEGER," + // 11: deleted
                "'STATUS' INTEGER," + // 12: status
                "'FARM_ID' INTEGER," + // 13: farmId
                "'UNIT_ID' INTEGER);"); // 14: unitId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FIELD'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Field entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(2, desc);
        }
 
        Boolean isServerdata = entity.getIsServerdata();
        if (isServerdata != null) {
            stmt.bindLong(3, isServerdata ? 1l: 0l);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(4, area);
        }
 
        Integer boundaryModified = entity.getBoundaryModified();
        if (boundaryModified != null) {
            stmt.bindLong(5, boundaryModified);
        }
 
        Integer boundaryRevision = entity.getBoundaryRevision();
        if (boundaryRevision != null) {
            stmt.bindLong(6, boundaryRevision);
        }
 
        Integer bottomRightX = entity.getBottomRightX();
        if (bottomRightX != null) {
            stmt.bindLong(7, bottomRightX);
        }
 
        Integer bottomRightY = entity.getBottomRightY();
        if (bottomRightY != null) {
            stmt.bindLong(8, bottomRightY);
        }
 
        Integer topLeftX = entity.getTopLeftX();
        if (topLeftX != null) {
            stmt.bindLong(9, topLeftX);
        }
 
        Integer topLeftY = entity.getTopLeftY();
        if (topLeftY != null) {
            stmt.bindLong(10, topLeftY);
        }
 
        Integer locked = entity.getLocked();
        if (locked != null) {
            stmt.bindLong(11, locked);
        }
 
        Integer deleted = entity.getDeleted();
        if (deleted != null) {
            stmt.bindLong(12, deleted);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(13, status);
        }
 
        Long farmId = entity.getFarmId();
        if (farmId != null) {
            stmt.bindLong(14, farmId);
        }
 
        Long unitId = entity.getUnitId();
        if (unitId != null) {
            stmt.bindLong(15, unitId);
        }
    }

    @Override
    protected void attachEntity(Field entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Field readEntity(Cursor cursor, int offset) {
        Field entity = new Field( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // desc
            cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0, // isServerdata
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // area
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // boundaryModified
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // boundaryRevision
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // bottomRightX
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // bottomRightY
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // topLeftX
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // topLeftY
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // locked
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // deleted
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // status
            cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13), // farmId
            cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14) // unitId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Field entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDesc(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIsServerdata(cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0);
        entity.setArea(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBoundaryModified(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setBoundaryRevision(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setBottomRightX(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setBottomRightY(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setTopLeftX(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setTopLeftY(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setLocked(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setDeleted(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setStatus(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setFarmId(cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13));
        entity.setUnitId(cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Field entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Field entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getFarmDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getUnitsDao().getAllColumns());
            builder.append(" FROM FIELD T");
            builder.append(" LEFT JOIN FARM T0 ON T.'FARM_ID'=T0.'_id'");
            builder.append(" LEFT JOIN UNITS T1 ON T.'UNIT_ID'=T1.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Field loadCurrentDeep(Cursor cursor, boolean lock) {
        Field entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Farm farm = loadCurrentOther(daoSession.getFarmDao(), cursor, offset);
        entity.setFarm(farm);
        offset += daoSession.getFarmDao().getAllColumns().length;

        Units units = loadCurrentOther(daoSession.getUnitsDao(), cursor, offset);
        entity.setUnits(units);

        return entity;    
    }

    public Field loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Field> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Field> list = new ArrayList<Field>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Field> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Field> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
