package com.trimble.agmantra.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import com.trimble.agmantra.entity.Units;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table UNITS.
*/
public class UnitsDao extends AbstractDao<Units, Long> {

    public static final String TABLENAME = "UNITS";

    /**
     * Properties of entity Units.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Locked = new Property(1, Integer.class, "locked", false, "LOCKED");
        public final static Property Metric = new Property(2, Integer.class, "metric", false, "METRIC");
        public final static Property Ushort = new Property(3, Integer.class, "ushort", false, "USHORT");
        public final static Property Singular = new Property(4, Integer.class, "singular", false, "SINGULAR");
        public final static Property Type = new Property(5, Integer.class, "type", false, "TYPE");
        public final static Property UnitConv = new Property(6, Integer.class, "unitConv", false, "UNIT_CONV");
    };


    public UnitsDao(DaoConfig config) {
        super(config);
    }
    
    public UnitsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'UNITS' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'LOCKED' INTEGER," + // 1: locked
                "'METRIC' INTEGER," + // 2: metric
                "'USHORT' INTEGER," + // 3: ushort
                "'SINGULAR' INTEGER," + // 4: singular
                "'TYPE' INTEGER," + // 5: type
                "'UNIT_CONV' INTEGER);"); // 6: unitConv
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'UNITS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Units entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer locked = entity.getLocked();
        if (locked != null) {
            stmt.bindLong(2, locked);
        }
 
        Integer metric = entity.getMetric();
        if (metric != null) {
            stmt.bindLong(3, metric);
        }
 
        Integer ushort = entity.getUshort();
        if (ushort != null) {
            stmt.bindLong(4, ushort);
        }
 
        Integer singular = entity.getSingular();
        if (singular != null) {
            stmt.bindLong(5, singular);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(6, type);
        }
 
        Integer unitConv = entity.getUnitConv();
        if (unitConv != null) {
            stmt.bindLong(7, unitConv);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Units readEntity(Cursor cursor, int offset) {
        Units entity = new Units( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // locked
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // metric
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // ushort
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // singular
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // type
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6) // unitConv
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Units entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLocked(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setMetric(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setUshort(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setSingular(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setType(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setUnitConv(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Units entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Units entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
