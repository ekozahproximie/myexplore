package com.trimble.agmantra.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.SqlUtils;

import com.trimble.agmantra.entity.Crop;
import com.trimble.agmantra.entity.Field;
import com.trimble.agmantra.entity.Job;
import com.trimble.agmantra.entity.JobType;

import com.trimble.agmantra.entity.AgJob;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table AG_JOB.
*/
public class AgJobDao extends AbstractDao<AgJob, Long> {

    public static final String TABLENAME = "AG_JOB";

    /**
     * Properties of entity AgJob.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Cropdesc = new Property(1, String.class, "cropdesc", false, "CROPDESC");
        public final static Property JobId = new Property(2, Long.class, "jobId", false, "JOB_ID");
        public final static Property CropId = new Property(3, Long.class, "cropId", false, "CROP_ID");
        public final static Property FieldId = new Property(4, Long.class, "fieldId", false, "FIELD_ID");
        public final static Property JobTypeId = new Property(5, Long.class, "jobTypeId", false, "JOB_TYPE_ID");
    };

    private DaoSession daoSession;


    public AgJobDao(DaoConfig config) {
        super(config);
    }
    
    public AgJobDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'AG_JOB' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'CROPDESC' TEXT," + // 1: cropdesc
                "'JOB_ID' INTEGER," + // 2: jobId
                "'CROP_ID' INTEGER," + // 3: cropId
                "'FIELD_ID' INTEGER," + // 4: fieldId
                "'JOB_TYPE_ID' INTEGER);"); // 5: jobTypeId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'AG_JOB'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AgJob entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String cropdesc = entity.getCropdesc();
        if (cropdesc != null) {
            stmt.bindString(2, cropdesc);
        }
 
        Long jobId = entity.getJobId();
        if (jobId != null) {
            stmt.bindLong(3, jobId);
        }
 
        Long cropId = entity.getCropId();
        if (cropId != null) {
            stmt.bindLong(4, cropId);
        }
 
        Long fieldId = entity.getFieldId();
        if (fieldId != null) {
            stmt.bindLong(5, fieldId);
        }
 
        Long jobTypeId = entity.getJobTypeId();
        if (jobTypeId != null) {
            stmt.bindLong(6, jobTypeId);
        }
    }

    @Override
    protected void attachEntity(AgJob entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public AgJob readEntity(Cursor cursor, int offset) {
        AgJob entity = new AgJob( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // cropdesc
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // jobId
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // cropId
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // fieldId
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // jobTypeId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AgJob entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCropdesc(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setJobId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setCropId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setFieldId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setJobTypeId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(AgJob entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(AgJob entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getCropDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getFieldDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getJobTypeDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T3", daoSession.getJobDao().getAllColumns());
            builder.append(" FROM AG_JOB T");
            builder.append(" LEFT JOIN CROP T0 ON T.'CROP_ID'=T0.'_id'");
            builder.append(" LEFT JOIN FIELD T1 ON T.'FIELD_ID'=T1.'_id'");
            builder.append(" LEFT JOIN JOB_TYPE T2 ON T.'JOB_TYPE_ID'=T2.'_id'");
            builder.append(" LEFT JOIN JOB T3 ON T.'JOB_ID'=T3.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected AgJob loadCurrentDeep(Cursor cursor, boolean lock) {
        AgJob entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Crop crop = loadCurrentOther(daoSession.getCropDao(), cursor, offset);
        entity.setCrop(crop);
        offset += daoSession.getCropDao().getAllColumns().length;

        Field field = loadCurrentOther(daoSession.getFieldDao(), cursor, offset);
        entity.setField(field);
        offset += daoSession.getFieldDao().getAllColumns().length;

        JobType jobType = loadCurrentOther(daoSession.getJobTypeDao(), cursor, offset);
        entity.setJobType(jobType);
        offset += daoSession.getJobTypeDao().getAllColumns().length;

        Job job = loadCurrentOther(daoSession.getJobDao(), cursor, offset);
        entity.setJob(job);

        return entity;    
    }

    public AgJob loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<AgJob> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<AgJob> list = new ArrayList<AgJob>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<AgJob> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<AgJob> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
