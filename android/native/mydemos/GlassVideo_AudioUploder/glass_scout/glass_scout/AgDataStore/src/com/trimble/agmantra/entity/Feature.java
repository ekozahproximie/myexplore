package com.trimble.agmantra.entity;

import com.trimble.agmantra.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.trimble.agmantra.dao.FeatureDao;
import com.trimble.agmantra.dao.FeatureTypeDao;
import com.trimble.agmantra.dao.FieldDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table FEATURE.
 */
public class Feature {

    private Long id;
    private Long area;
    private Long color;
    private Integer thickness;
    private Long perimeter;
    private byte[] vertex;
    private Integer bottomRightX;
    private Integer bottomRightY;
    private Integer topLeftX;
    private Integer topLeftY;
    private Long featureTypeId;
    private Long fieldId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient FeatureDao myDao;

    private FeatureType featureType;
    private Long featureType__resolvedKey;

    private Field field;
    private Long field__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Feature() {
    }

    public Feature(Long id) {
        this.id = id;
    }

    public Feature(Long id, Long area, Long color, Integer thickness, Long perimeter, byte[] vertex, Integer bottomRightX, Integer bottomRightY, Integer topLeftX, Integer topLeftY, Long featureTypeId, Long fieldId) {
        this.id = id;
        this.area = area;
        this.color = color;
        this.thickness = thickness;
        this.perimeter = perimeter;
        this.vertex = vertex;
        this.bottomRightX = bottomRightX;
        this.bottomRightY = bottomRightY;
        this.topLeftX = topLeftX;
        this.topLeftY = topLeftY;
        this.featureTypeId = featureTypeId;
        this.fieldId = fieldId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getFeatureDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getArea() {
        return area;
    }

    public void setArea(Long area) {
        this.area = area;
    }

    public Long getColor() {
        return color;
    }

    public void setColor(Long color) {
        this.color = color;
    }

    public Integer getThickness() {
        return thickness;
    }

    public void setThickness(Integer thickness) {
        this.thickness = thickness;
    }

    public Long getPerimeter() {
        return perimeter;
    }

    public void setPerimeter(Long perimeter) {
        this.perimeter = perimeter;
    }

    public byte[] getVertex() {
        return vertex;
    }

    public void setVertex(byte[] vertex) {
        this.vertex = vertex;
    }

    public Integer getBottomRightX() {
        return bottomRightX;
    }

    public void setBottomRightX(Integer bottomRightX) {
        this.bottomRightX = bottomRightX;
    }

    public Integer getBottomRightY() {
        return bottomRightY;
    }

    public void setBottomRightY(Integer bottomRightY) {
        this.bottomRightY = bottomRightY;
    }

    public Integer getTopLeftX() {
        return topLeftX;
    }

    public void setTopLeftX(Integer topLeftX) {
        this.topLeftX = topLeftX;
    }

    public Integer getTopLeftY() {
        return topLeftY;
    }

    public void setTopLeftY(Integer topLeftY) {
        this.topLeftY = topLeftY;
    }

    public Long getFeatureTypeId() {
        return featureTypeId;
    }

    public void setFeatureTypeId(Long featureTypeId) {
        this.featureTypeId = featureTypeId;
    }

    public Long getFieldId() {
        return fieldId;
    }

    public void setFieldId(Long fieldId) {
        this.fieldId = fieldId;
    }

    /** To-one relationship, resolved on first access. */
    public FeatureType getFeatureType() {
        if (featureType__resolvedKey == null || !featureType__resolvedKey.equals(featureTypeId)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            FeatureTypeDao targetDao = daoSession.getFeatureTypeDao();
            featureType = targetDao.load(featureTypeId);
            featureType__resolvedKey = featureTypeId;
        }
        return featureType;
    }

    public void setFeatureType(FeatureType featureType) {
        this.featureType = featureType;
        featureTypeId = featureType == null ? null : featureType.getId();
        featureType__resolvedKey = featureTypeId;
    }

    /** To-one relationship, resolved on first access. */
    public Field getField() {
        if (field__resolvedKey == null || !field__resolvedKey.equals(fieldId)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            FieldDao targetDao = daoSession.getFieldDao();
            field = targetDao.load(fieldId);
            field__resolvedKey = fieldId;
        }
        return field;
    }

    public void setField(Field field) {
        this.field = field;
        fieldId = field == null ? null : field.getId();
        field__resolvedKey = fieldId;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
