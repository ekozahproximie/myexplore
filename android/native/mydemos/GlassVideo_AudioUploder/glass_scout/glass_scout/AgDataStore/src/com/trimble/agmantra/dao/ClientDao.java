package com.trimble.agmantra.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import com.trimble.agmantra.entity.Client;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CLIENT.
*/
public class ClientDao extends AbstractDao<Client, Long> {

    public static final String TABLENAME = "CLIENT";

    /**
     * Properties of entity Client.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Desc = new Property(1, String.class, "desc", false, "DESC");
        public final static Property IsServerdata = new Property(2, Boolean.class, "isServerdata", false, "IS_SERVERDATA");
        public final static Property Locked = new Property(3, Integer.class, "locked", false, "LOCKED");
        public final static Property Deleted = new Property(4, Integer.class, "deleted", false, "DELETED");
        public final static Property Status = new Property(5, Integer.class, "status", false, "STATUS");
    };


    public ClientDao(DaoConfig config) {
        super(config);
    }
    
    public ClientDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CLIENT' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'DESC' TEXT," + // 1: desc
                "'IS_SERVERDATA' INTEGER," + // 2: isServerdata
                "'LOCKED' INTEGER," + // 3: locked
                "'DELETED' INTEGER," + // 4: deleted
                "'STATUS' INTEGER);"); // 5: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CLIENT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Client entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(2, desc);
        }
 
        Boolean isServerdata = entity.getIsServerdata();
        if (isServerdata != null) {
            stmt.bindLong(3, isServerdata ? 1l: 0l);
        }
 
        Integer locked = entity.getLocked();
        if (locked != null) {
            stmt.bindLong(4, locked);
        }
 
        Integer deleted = entity.getDeleted();
        if (deleted != null) {
            stmt.bindLong(5, deleted);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(6, status);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Client readEntity(Cursor cursor, int offset) {
        Client entity = new Client( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // desc
            cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0, // isServerdata
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // locked
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // deleted
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5) // status
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Client entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDesc(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIsServerdata(cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0);
        entity.setLocked(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setDeleted(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setStatus(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Client entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Client entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
