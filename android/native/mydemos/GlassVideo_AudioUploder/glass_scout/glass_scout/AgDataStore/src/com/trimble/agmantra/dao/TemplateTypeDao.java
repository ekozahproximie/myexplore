package com.trimble.agmantra.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import com.trimble.agmantra.entity.TemplateType;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TEMPLATE_TYPE.
*/
public class TemplateTypeDao extends AbstractDao<TemplateType, Long> {

    public static final String TABLENAME = "TEMPLATE_TYPE";

    /**
     * Properties of entity TemplateType.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Templateid = new Property(1, Integer.class, "templateid", false, "TEMPLATEID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property FdtTag = new Property(3, String.class, "fdtTag", false, "FDT_TAG");
        public final static Property TemplateXml = new Property(4, byte[].class, "templateXml", false, "TEMPLATE_XML");
        public final static Property Status = new Property(5, Integer.class, "status", false, "STATUS");
        public final static Property Jobtypeid = new Property(6, Integer.class, "jobtypeid", false, "JOBTYPEID");
        public final static Property Featuretypeid = new Property(7, Integer.class, "featuretypeid", false, "FEATURETYPEID");
        public final static Property Locale = new Property(8, String.class, "locale", false, "LOCALE");
    };


    public TemplateTypeDao(DaoConfig config) {
        super(config);
    }
    
    public TemplateTypeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TEMPLATE_TYPE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'TEMPLATEID' INTEGER," + // 1: templateid
                "'NAME' TEXT," + // 2: name
                "'FDT_TAG' TEXT," + // 3: fdtTag
                "'TEMPLATE_XML' BLOB," + // 4: templateXml
                "'STATUS' INTEGER," + // 5: status
                "'JOBTYPEID' INTEGER," + // 6: jobtypeid
                "'FEATURETYPEID' INTEGER," + // 7: featuretypeid
                "'LOCALE' TEXT);"); // 8: locale
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TEMPLATE_TYPE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TemplateType entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer templateid = entity.getTemplateid();
        if (templateid != null) {
            stmt.bindLong(2, templateid);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String fdtTag = entity.getFdtTag();
        if (fdtTag != null) {
            stmt.bindString(4, fdtTag);
        }
 
        byte[] templateXml = entity.getTemplateXml();
        if (templateXml != null) {
            stmt.bindBlob(5, templateXml);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(6, status);
        }
 
        Integer jobtypeid = entity.getJobtypeid();
        if (jobtypeid != null) {
            stmt.bindLong(7, jobtypeid);
        }
 
        Integer featuretypeid = entity.getFeaturetypeid();
        if (featuretypeid != null) {
            stmt.bindLong(8, featuretypeid);
        }
 
        String locale = entity.getLocale();
        if (locale != null) {
            stmt.bindString(9, locale);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TemplateType readEntity(Cursor cursor, int offset) {
        TemplateType entity = new TemplateType( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // templateid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // fdtTag
            cursor.isNull(offset + 4) ? null : cursor.getBlob(offset + 4), // templateXml
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // status
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // jobtypeid
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // featuretypeid
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // locale
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TemplateType entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTemplateid(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFdtTag(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTemplateXml(cursor.isNull(offset + 4) ? null : cursor.getBlob(offset + 4));
        entity.setStatus(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setJobtypeid(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setFeaturetypeid(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setLocale(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TemplateType entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TemplateType entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
