package com.trimble.agmantra.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import com.trimble.agmantra.entity.Mapping;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MAPPING.
*/
public class MappingDao extends AbstractDao<Mapping, Long> {

    public static final String TABLENAME = "MAPPING";

    /**
     * Properties of entity Mapping.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AttributeId = new Property(1, Integer.class, "AttributeId", false, "ATTRIBUTE_ID");
        public final static Property AttrItemID = new Property(2, Integer.class, "AttrItemID", false, "ATTR_ITEM_ID");
        public final static Property GroupID = new Property(3, Integer.class, "GroupID", false, "GROUP_ID");
        public final static Property Level = new Property(4, Integer.class, "Level", false, "LEVEL");
        public final static Property MappingID = new Property(5, Integer.class, "MappingID", false, "MAPPING_ID");
        public final static Property NextmappingID = new Property(6, Integer.class, "NextmappingID", false, "NEXTMAPPING_ID");
    };


    public MappingDao(DaoConfig config) {
        super(config);
    }
    
    public MappingDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MAPPING' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ATTRIBUTE_ID' INTEGER," + // 1: AttributeId
                "'ATTR_ITEM_ID' INTEGER," + // 2: AttrItemID
                "'GROUP_ID' INTEGER," + // 3: GroupID
                "'LEVEL' INTEGER," + // 4: Level
                "'MAPPING_ID' INTEGER," + // 5: MappingID
                "'NEXTMAPPING_ID' INTEGER);"); // 6: NextmappingID
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MAPPING'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Mapping entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer AttributeId = entity.getAttributeId();
        if (AttributeId != null) {
            stmt.bindLong(2, AttributeId);
        }
 
        Integer AttrItemID = entity.getAttrItemID();
        if (AttrItemID != null) {
            stmt.bindLong(3, AttrItemID);
        }
 
        Integer GroupID = entity.getGroupID();
        if (GroupID != null) {
            stmt.bindLong(4, GroupID);
        }
 
        Integer Level = entity.getLevel();
        if (Level != null) {
            stmt.bindLong(5, Level);
        }
 
        Integer MappingID = entity.getMappingID();
        if (MappingID != null) {
            stmt.bindLong(6, MappingID);
        }
 
        Integer NextmappingID = entity.getNextmappingID();
        if (NextmappingID != null) {
            stmt.bindLong(7, NextmappingID);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Mapping readEntity(Cursor cursor, int offset) {
        Mapping entity = new Mapping( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // AttributeId
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // AttrItemID
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // GroupID
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // Level
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // MappingID
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6) // NextmappingID
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Mapping entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAttributeId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setAttrItemID(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setGroupID(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setLevel(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setMappingID(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setNextmappingID(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Mapping entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Mapping entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
