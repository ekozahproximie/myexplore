package com.trimble.agmantra.entity;

import com.trimble.agmantra.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.trimble.agmantra.dao.AgJobDao;
import com.trimble.agmantra.dao.CropDao;
import com.trimble.agmantra.dao.FieldDao;
import com.trimble.agmantra.dao.JobDao;
import com.trimble.agmantra.dao.JobTypeDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table AG_JOB.
 */
public class AgJob {

    private Long id;
    private String cropdesc;
    private Long jobId;
    private Long cropId;
    private Long fieldId;
    private Long jobTypeId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient AgJobDao myDao;

    private Crop crop;
    private Long crop__resolvedKey;

    private Field field;
    private Long field__resolvedKey;

    private JobType jobType;
    private Long jobType__resolvedKey;

    private Job job;
    private Long job__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public AgJob() {
    }

    public AgJob(Long id) {
        this.id = id;
    }

    public AgJob(Long id, String cropdesc, Long jobId, Long cropId, Long fieldId, Long jobTypeId) {
        this.id = id;
        this.cropdesc = cropdesc;
        this.jobId = jobId;
        this.cropId = cropId;
        this.fieldId = fieldId;
        this.jobTypeId = jobTypeId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getAgJobDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getCropdesc() {
        return cropdesc;
    }

    public void setCropdesc(String cropdesc) {
        this.cropdesc = cropdesc;
    }

    public Long getJobId() {
        return jobId;
    }

    public void setJobId(Long jobId) {
        this.jobId = jobId;
    }

    public Long getCropId() {
        return cropId;
    }

    public void setCropId(Long cropId) {
        this.cropId = cropId;
    }

    public Long getFieldId() {
        return fieldId;
    }

    public void setFieldId(Long fieldId) {
        this.fieldId = fieldId;
    }

    public Long getJobTypeId() {
        return jobTypeId;
    }

    public void setJobTypeId(Long jobTypeId) {
        this.jobTypeId = jobTypeId;
    }

    /** To-one relationship, resolved on first access. */
    public Crop getCrop() {
        if (crop__resolvedKey == null || !crop__resolvedKey.equals(cropId)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CropDao targetDao = daoSession.getCropDao();
            crop = targetDao.load(cropId);
            crop__resolvedKey = cropId;
        }
        return crop;
    }

    public void setCrop(Crop crop) {
        this.crop = crop;
        cropId = crop == null ? null : crop.getId();
        crop__resolvedKey = cropId;
    }

    /** To-one relationship, resolved on first access. */
    public Field getField() {
        if (field__resolvedKey == null || !field__resolvedKey.equals(fieldId)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            FieldDao targetDao = daoSession.getFieldDao();
            field = targetDao.load(fieldId);
            field__resolvedKey = fieldId;
        }
        return field;
    }

    public void setField(Field field) {
        this.field = field;
        fieldId = field == null ? null : field.getId();
        field__resolvedKey = fieldId;
    }

    /** To-one relationship, resolved on first access. */
    public JobType getJobType() {
        if (jobType__resolvedKey == null || !jobType__resolvedKey.equals(jobTypeId)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            JobTypeDao targetDao = daoSession.getJobTypeDao();
            jobType = targetDao.load(jobTypeId);
            jobType__resolvedKey = jobTypeId;
        }
        return jobType;
    }

    public void setJobType(JobType jobType) {
        this.jobType = jobType;
        jobTypeId = jobType == null ? null : jobType.getId();
        jobType__resolvedKey = jobTypeId;
    }

    /** To-one relationship, resolved on first access. */
    public Job getJob() {
        if (job__resolvedKey == null || !job__resolvedKey.equals(jobId)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            JobDao targetDao = daoSession.getJobDao();
            job = targetDao.load(jobId);
            job__resolvedKey = jobId;
        }
        return job;
    }

    public void setJob(Job job) {
        this.job = job;
        jobId = job == null ? null : job.getId();
        job__resolvedKey = jobId;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
