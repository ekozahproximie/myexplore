package com.trimble.agmantra.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.SqlUtils;

import com.trimble.agmantra.entity.Client;

import com.trimble.agmantra.entity.Farm;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table FARM.
*/
public class FarmDao extends AbstractDao<Farm, Long> {

    public static final String TABLENAME = "FARM";

    /**
     * Properties of entity Farm.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Desc = new Property(1, String.class, "desc", false, "DESC");
        public final static Property Locked = new Property(2, Integer.class, "locked", false, "LOCKED");
        public final static Property Deleted = new Property(3, Integer.class, "deleted", false, "DELETED");
        public final static Property IsServerdata = new Property(4, Boolean.class, "isServerdata", false, "IS_SERVERDATA");
        public final static Property Status = new Property(5, Integer.class, "status", false, "STATUS");
        public final static Property ClientId = new Property(6, Long.class, "clientId", false, "CLIENT_ID");
    };

    private DaoSession daoSession;


    public FarmDao(DaoConfig config) {
        super(config);
    }
    
    public FarmDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'FARM' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'DESC' TEXT," + // 1: desc
                "'LOCKED' INTEGER," + // 2: locked
                "'DELETED' INTEGER," + // 3: deleted
                "'IS_SERVERDATA' INTEGER," + // 4: isServerdata
                "'STATUS' INTEGER," + // 5: status
                "'CLIENT_ID' INTEGER);"); // 6: clientId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FARM'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Farm entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(2, desc);
        }
 
        Integer locked = entity.getLocked();
        if (locked != null) {
            stmt.bindLong(3, locked);
        }
 
        Integer deleted = entity.getDeleted();
        if (deleted != null) {
            stmt.bindLong(4, deleted);
        }
 
        Boolean isServerdata = entity.getIsServerdata();
        if (isServerdata != null) {
            stmt.bindLong(5, isServerdata ? 1l: 0l);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(6, status);
        }
 
        Long clientId = entity.getClientId();
        if (clientId != null) {
            stmt.bindLong(7, clientId);
        }
    }

    @Override
    protected void attachEntity(Farm entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Farm readEntity(Cursor cursor, int offset) {
        Farm entity = new Farm( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // desc
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // locked
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // deleted
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // isServerdata
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // status
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6) // clientId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Farm entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDesc(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLocked(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setDeleted(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setIsServerdata(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setStatus(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setClientId(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Farm entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Farm entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getClientDao().getAllColumns());
            builder.append(" FROM FARM T");
            builder.append(" LEFT JOIN CLIENT T0 ON T.'CLIENT_ID'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Farm loadCurrentDeep(Cursor cursor, boolean lock) {
        Farm entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Client client = loadCurrentOther(daoSession.getClientDao(), cursor, offset);
        entity.setClient(client);

        return entity;    
    }

    public Farm loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Farm> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Farm> list = new ArrayList<Farm>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Farm> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Farm> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
