package com.trimble.agmantra.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.SqlUtils;

import com.trimble.agmantra.entity.TemplateType;

import com.trimble.agmantra.entity.AttributeInfoEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ATTRIBUTE_INFO_ENTITY.
*/
public class AttributeInfoEntityDao extends AbstractDao<AttributeInfoEntity, Long> {

    public static final String TABLENAME = "ATTRIBUTE_INFO_ENTITY";

    /**
     * Properties of entity AttributeInfoEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DataType = new Property(1, Integer.class, "dataType", false, "DATA_TYPE");
        public final static Property DefaultValue = new Property(2, String.class, "defaultValue", false, "DEFAULT_VALUE");
        public final static Property Minvalue = new Property(3, String.class, "Minvalue", false, "MINVALUE");
        public final static Property Maxvalue = new Property(4, String.class, "Maxvalue", false, "MAXVALUE");
        public final static Property Condition = new Property(5, String.class, "Condition", false, "CONDITION");
        public final static Property Display = new Property(6, Integer.class, "display", false, "DISPLAY");
        public final static Property Editable = new Property(7, Integer.class, "editable", false, "EDITABLE");
        public final static Property Lastenter = new Property(8, String.class, "lastenter", false, "LASTENTER");
        public final static Property FdtTag = new Property(9, String.class, "fdtTag", false, "FDT_TAG");
        public final static Property Name = new Property(10, String.class, "name", false, "NAME");
        public final static Property Length = new Property(11, Integer.class, "length", false, "LENGTH");
        public final static Property Encode = new Property(12, Integer.class, "encode", false, "ENCODE");
        public final static Property TemplatetypeId = new Property(13, Long.class, "TemplatetypeId", false, "TEMPLATETYPE_ID");
    };

    private DaoSession daoSession;


    public AttributeInfoEntityDao(DaoConfig config) {
        super(config);
    }
    
    public AttributeInfoEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ATTRIBUTE_INFO_ENTITY' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'DATA_TYPE' INTEGER," + // 1: dataType
                "'DEFAULT_VALUE' TEXT," + // 2: defaultValue
                "'MINVALUE' TEXT," + // 3: Minvalue
                "'MAXVALUE' TEXT," + // 4: Maxvalue
                "'CONDITION' TEXT," + // 5: Condition
                "'DISPLAY' INTEGER," + // 6: display
                "'EDITABLE' INTEGER," + // 7: editable
                "'LASTENTER' TEXT," + // 8: lastenter
                "'FDT_TAG' TEXT," + // 9: fdtTag
                "'NAME' TEXT," + // 10: name
                "'LENGTH' INTEGER," + // 11: length
                "'ENCODE' INTEGER," + // 12: encode
                "'TEMPLATETYPE_ID' INTEGER);"); // 13: TemplatetypeId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ATTRIBUTE_INFO_ENTITY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AttributeInfoEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer dataType = entity.getDataType();
        if (dataType != null) {
            stmt.bindLong(2, dataType);
        }
 
        String defaultValue = entity.getDefaultValue();
        if (defaultValue != null) {
            stmt.bindString(3, defaultValue);
        }
 
        String Minvalue = entity.getMinvalue();
        if (Minvalue != null) {
            stmt.bindString(4, Minvalue);
        }
 
        String Maxvalue = entity.getMaxvalue();
        if (Maxvalue != null) {
            stmt.bindString(5, Maxvalue);
        }
 
        String Condition = entity.getCondition();
        if (Condition != null) {
            stmt.bindString(6, Condition);
        }
 
        Integer display = entity.getDisplay();
        if (display != null) {
            stmt.bindLong(7, display);
        }
 
        Integer editable = entity.getEditable();
        if (editable != null) {
            stmt.bindLong(8, editable);
        }
 
        String lastenter = entity.getLastenter();
        if (lastenter != null) {
            stmt.bindString(9, lastenter);
        }
 
        String fdtTag = entity.getFdtTag();
        if (fdtTag != null) {
            stmt.bindString(10, fdtTag);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(11, name);
        }
 
        Integer length = entity.getLength();
        if (length != null) {
            stmt.bindLong(12, length);
        }
 
        Integer encode = entity.getEncode();
        if (encode != null) {
            stmt.bindLong(13, encode);
        }
 
        Long TemplatetypeId = entity.getTemplatetypeId();
        if (TemplatetypeId != null) {
            stmt.bindLong(14, TemplatetypeId);
        }
    }

    @Override
    protected void attachEntity(AttributeInfoEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public AttributeInfoEntity readEntity(Cursor cursor, int offset) {
        AttributeInfoEntity entity = new AttributeInfoEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // dataType
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // defaultValue
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Minvalue
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Maxvalue
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Condition
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // display
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // editable
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // lastenter
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // fdtTag
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // name
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // length
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // encode
            cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13) // TemplatetypeId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AttributeInfoEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDataType(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setDefaultValue(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMinvalue(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMaxvalue(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCondition(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDisplay(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setEditable(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setLastenter(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFdtTag(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setLength(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setEncode(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setTemplatetypeId(cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(AttributeInfoEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(AttributeInfoEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getTemplateTypeDao().getAllColumns());
            builder.append(" FROM ATTRIBUTE_INFO_ENTITY T");
            builder.append(" LEFT JOIN TEMPLATE_TYPE T0 ON T.'TEMPLATETYPE_ID'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected AttributeInfoEntity loadCurrentDeep(Cursor cursor, boolean lock) {
        AttributeInfoEntity entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        TemplateType templateType = loadCurrentOther(daoSession.getTemplateTypeDao(), cursor, offset);
        entity.setTemplateType(templateType);

        return entity;    
    }

    public AttributeInfoEntity loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<AttributeInfoEntity> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<AttributeInfoEntity> list = new ArrayList<AttributeInfoEntity>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<AttributeInfoEntity> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<AttributeInfoEntity> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
