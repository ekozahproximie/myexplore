package com.trimble.agmantra.dao;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;

import com.trimble.agmantra.entity.AttributeEntity;

import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.IdentityScopeType;
import de.greenrobot.dao.QueryBuilder;

import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * Master of DAO (schema version 1): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
	public static final int VERSION_1_1_0_21 = 1;
	public static final int VERSION_1_5_0_0 = 2;
	public static final int VERSION_2_0_0_0 = 3;
	public static final int VERSION_2_2_0_0 = 4;
	
    public static final int SCHEMA_VERSION = VERSION_2_2_0_0;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists, int schema_version) {
       switch (schema_version) {
          case VERSION_1_1_0_21:
          case VERSION_1_5_0_0:
          case VERSION_2_0_0_0:
             createInitVersionTables(db, ifNotExists);
             break;
          case VERSION_2_2_0_0:
             createInitVersionTables(db, ifNotExists);
             createlatestVersionTables(db, ifNotExists);
          default:
             break;
       }
        
    }
    
    private static void createlatestVersionTables(SQLiteDatabase db, boolean ifNotExists){
       UserDao.createTable(db, ifNotExists);
       OrganizationDao.createTable(db, ifNotExists);
    }
    
    private static void createInitVersionTables(SQLiteDatabase db, boolean ifNotExists){
       ClientDao.createTable(db, ifNotExists);
       FarmDao.createTable(db, ifNotExists);
       FeatureTypeDao.createTable(db, ifNotExists);
       UnitsDao.createTable(db, ifNotExists);
       FieldDao.createTable(db, ifNotExists);
       FeatureDao.createTable(db, ifNotExists);
       CommodityDao.createTable(db, ifNotExists);
       CropDao.createTable(db, ifNotExists);
       TemplateTypeDao.createTable(db, ifNotExists);
       AttributeInfoEntityDao.createTable(db, ifNotExists);
       PickListDao.createTable(db, ifNotExists);
       AttributeEntityDao.createTable(db, ifNotExists);
       JobDao.createTable(db, ifNotExists);
       JobtimingDao.createTable(db, ifNotExists);
       JobTransactionDao.createTable(db, ifNotExists);
       JobTypeDao.createTable(db, ifNotExists);
       AgJobDao.createTable(db, ifNotExists);
       EquipmentsDao.createTable(db, ifNotExists);
       SupplyDao.createTable(db, ifNotExists);
       TankMixDao.createTable(db, ifNotExists);
       PeopleDao.createTable(db, ifNotExists);
       WhetherDao.createTable(db, ifNotExists);
       FieldConditionDao.createTable(db, ifNotExists);
       FlagCounterDao.createTable(db, ifNotExists);
       MappingDao.createTable(db, ifNotExists);
       LanguageDao.createTable(db, ifNotExists);    
    }
    
    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        OrganizationDao.dropTable(db, ifExists);
        UserDao.dropTable(db, ifExists);
        ClientDao.dropTable(db, ifExists);
        FarmDao.dropTable(db, ifExists);
        FeatureTypeDao.dropTable(db, ifExists);
        UnitsDao.dropTable(db, ifExists);
        FieldDao.dropTable(db, ifExists);
        FeatureDao.dropTable(db, ifExists);
        CommodityDao.dropTable(db, ifExists);
        CropDao.dropTable(db, ifExists);
        TemplateTypeDao.dropTable(db, ifExists);
        AttributeInfoEntityDao.dropTable(db, ifExists);
        PickListDao.dropTable(db, ifExists);
        AttributeEntityDao.dropTable(db, ifExists);
        JobDao.dropTable(db, ifExists);
        JobtimingDao.dropTable(db, ifExists);
        JobTransactionDao.dropTable(db, ifExists);
        JobTypeDao.dropTable(db, ifExists);
        AgJobDao.dropTable(db, ifExists);
        EquipmentsDao.dropTable(db, ifExists);
        SupplyDao.dropTable(db, ifExists);
        TankMixDao.dropTable(db, ifExists);
        PeopleDao.dropTable(db, ifExists);
        WhetherDao.dropTable(db, ifExists);
        FieldConditionDao.dropTable(db, ifExists);
        FlagCounterDao.dropTable(db, ifExists);
        MappingDao.dropTable(db, ifExists);
        LanguageDao.dropTable(db, ifExists);
    }
    
    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false,SCHEMA_VERSION);
        }
    }
    
    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        private  boolean updateNeeded=false;
        public static final int ATTRIBUTE_ENTITY=1<<0;
        public static final int EULA_DISPLAY=1<<1;
        private  int iFlagUpdate=0;
        
        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

         @Override
         public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion
                  + " to " + newVersion + " by dropping all tables");
            switch (oldVersion) {
               case VERSION_1_1_0_21: {
                  switch (newVersion) {
                     case VERSION_1_5_0_0: {
                        changeForNDVI_GrowthStage(db);
                        break;
                     }
                     case VERSION_2_0_0_0: {
                        changeForNDVI_GrowthStage(db);
                        createSecondDBVersionTables(db,oldVersion);
                        break;
                     }
                     case VERSION_2_2_0_0: {
                        changeForNDVI_GrowthStage(db);
                        createSecondDBVersionTables(db,oldVersion);
                        createlatestVersionTables(db, false);
                        break;
                     }
   
                  }
   
                  break;
               }
               case VERSION_1_5_0_0: {
                  switch (newVersion) {
                     case VERSION_2_0_0_0: {
                        createSecondDBVersionTables(db,oldVersion);
                        break;
                     }
                     case VERSION_2_2_0_0: {
                        createSecondDBVersionTables(db,oldVersion);
                        createlatestVersionTables(db, false);
                        break;
                     }
   
                  }
                  break;
               }
               case VERSION_2_0_0_0: {
                  switch (newVersion) {
                     case VERSION_2_2_0_0: {
                        createlatestVersionTables(db, false);
                        break;
                     }
   
                  }
               }
                  break;
            }
   
            // dropAllTables(db, true);
            // onCreate(db);
         }
         
         private void createSecondDBVersionTables(SQLiteDatabase db, int oldVersion){
            changeForLocaleSupport(db, oldVersion);
            changeForTemplateSupport(db);
            updateAttributeEntity();
            updateEULANeed();
         }
         
        private void updateAttributeEntity(){
        	iFlagUpdate =iFlagUpdate |ATTRIBUTE_ENTITY;
        }
        
        public boolean isUpdateInAttributeEntity(){
        	return (iFlagUpdate & ATTRIBUTE_ENTITY) != 0;
        }
        
        public boolean isEULAUpdateNeed(){
        	return (iFlagUpdate & EULA_DISPLAY) != 0;
        }
        
        /**
         * @return the updateNeeded
         */
        public boolean isUpdateNeeded() {
            return updateNeeded;
        }
        public void setUpdateNeeded(boolean updateNeeded) {
			this.updateNeeded = updateNeeded;
		}
        
        private void updateEULANeed() {
        	iFlagUpdate =iFlagUpdate |EULA_DISPLAY;
        }
        private void changeForNDVI_GrowthStage(SQLiteDatabase db){
            updateNeeded=true;
            String stUpdateQuery="ALTER TABLE " + AttributeInfoEntityDao.TABLENAME
                    + " ADD COLUMN " + AttributeInfoEntityDao.Properties.Minvalue.columnName  + " VARCHAR;";
            db.execSQL(stUpdateQuery);
            
            stUpdateQuery="ALTER TABLE " + AttributeInfoEntityDao.TABLENAME
                    + " ADD COLUMN " + AttributeInfoEntityDao.Properties.Maxvalue.columnName  + " VARCHAR;";
            db.execSQL(stUpdateQuery);
            
            stUpdateQuery="ALTER TABLE " + AttributeInfoEntityDao.TABLENAME
                    + " ADD COLUMN " + AttributeInfoEntityDao.Properties.Condition.columnName + " VARCHAR;";
            db.execSQL(stUpdateQuery);
            
            stUpdateQuery="ALTER TABLE " + AttributeInfoEntityDao.TABLENAME
                    + " ADD COLUMN " + AttributeInfoEntityDao.Properties.Encode.columnName   + " INTEGER;";
            db.execSQL(stUpdateQuery);
            
            stUpdateQuery="ALTER TABLE " + AttributeInfoEntityDao.TABLENAME
                    + " ADD COLUMN " + AttributeInfoEntityDao.Properties.Display.columnName + " INTEGER;";
            db.execSQL(stUpdateQuery);
            
            stUpdateQuery="ALTER TABLE " + AttributeInfoEntityDao.TABLENAME
                    + " ADD COLUMN " + AttributeInfoEntityDao.Properties.Lastenter.columnName + " VARCHAR" +
                            ";";
            db.execSQL(stUpdateQuery);
            
             
            stUpdateQuery="ALTER TABLE " + PickListDao.TABLENAME
            + " ADD COLUMN " + PickListDao.Properties.GroupId.columnName  + " VARCHAR;";
            db.execSQL(stUpdateQuery);
            
            MappingDao.createTable(db, true);
        }
        
        private void changeForLocaleSupport(SQLiteDatabase db, int iOldVersion){
            updateNeeded=true;
            
            String stUpdateQuery=null;
            
            if(iOldVersion == VERSION_1_5_0_0){
	            stUpdateQuery="ALTER TABLE " + MappingDao.TABLENAME
	                    + " ADD COLUMN " + MappingDao.Properties.MappingID.columnName + " VARCHAR" + ";";
	            db.execSQL(stUpdateQuery);
	           
	            stUpdateQuery="ALTER TABLE " + MappingDao.TABLENAME
	                    + " ADD COLUMN " + MappingDao.Properties.NextmappingID.columnName + " VARCHAR" + ";";
	            db.execSQL(stUpdateQuery);
            }
            
            LanguageDao.createTable(db, true);
        }
        
        
        private void changeForTemplateSupport(SQLiteDatabase db){
            updateNeeded=true;
            
            String stUpdateQuery=null;
            
            stUpdateQuery="ALTER TABLE " + TemplateTypeDao.TABLENAME
                    + " ADD COLUMN " + TemplateTypeDao.Properties.Locale.columnName + " VARCHAR" + ";";
            db.execSQL(stUpdateQuery);
            
            stUpdateQuery="ALTER TABLE " + TemplateTypeDao.TABLENAME
                    + " ADD COLUMN " + TemplateTypeDao.Properties.Jobtypeid.columnName + " INTEGER" + ";";
            db.execSQL(stUpdateQuery);
            
            stUpdateQuery="ALTER TABLE " + TemplateTypeDao.TABLENAME
                    + " ADD COLUMN " + TemplateTypeDao.Properties.Featuretypeid.columnName + " INTEGER" + ";";
            db.execSQL(stUpdateQuery);
            
            stUpdateQuery="ALTER TABLE " + TemplateTypeDao.TABLENAME
                    + " ADD COLUMN " + TemplateTypeDao.Properties.Templateid.columnName + " INTEGER" + ";";
            db.execSQL(stUpdateQuery);
            
            
           
        }
        public long changeId( long iID){

        	if(iID>=5 && iID <=9){
        		iID += 2;
        	}else if(iID>=10 && iID <=14){
        		iID += 4;
        	}else if(iID>=15 && iID <=21){
        		iID += 6;
        	}else if(iID>=22 && iID <=24){
        		iID += 8;
        	}else if(iID>=26 && iID <=40){
        		iID += 8;
        	}else if(iID>=41 && iID <=42){
        		iID += 10;
        	}else if(iID == 25){
        		iID = 33;
        	}

        	return iID;
        	}
        public void updateAttributeTableID(){
        	DaoMaster daoMaster = new DaoMaster(getWritableDatabase());
    		DaoSession daoSession = daoMaster.newSession();
    		AttributeEntityDao attributeEntityDao=daoSession.getAttributeEntityDao();
    		 QueryBuilder<AttributeEntity> qb = attributeEntityDao.queryBuilder();
    		 List<AttributeEntity> entities=  qb.list();
    		 for (AttributeEntity attributeEntity : entities) {
				final long infoid= attributeEntity.getAttributeInfoId();
				attributeEntity.setAttributeInfoId(changeId(infoid));
				attributeEntityDao.update(attributeEntity);
			}
    		
        }
    }
    
    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(OrganizationDao.class);
        registerDaoClass(UserDao.class);
        registerDaoClass(ClientDao.class);
        registerDaoClass(FarmDao.class);
        registerDaoClass(FeatureTypeDao.class);
        registerDaoClass(UnitsDao.class);
        registerDaoClass(FieldDao.class);
        registerDaoClass(FeatureDao.class);
        registerDaoClass(CommodityDao.class);
        registerDaoClass(CropDao.class);
        registerDaoClass(TemplateTypeDao.class);
        registerDaoClass(AttributeInfoEntityDao.class);
        registerDaoClass(PickListDao.class);
        registerDaoClass(AttributeEntityDao.class);
        registerDaoClass(JobDao.class);
        registerDaoClass(JobtimingDao.class);
        registerDaoClass(JobTransactionDao.class);
        registerDaoClass(JobTypeDao.class);
        registerDaoClass(AgJobDao.class);
        registerDaoClass(EquipmentsDao.class);
        registerDaoClass(SupplyDao.class);
        registerDaoClass(TankMixDao.class);
        registerDaoClass(PeopleDao.class);
        registerDaoClass(WhetherDao.class);
        registerDaoClass(FieldConditionDao.class);
        registerDaoClass(FlagCounterDao.class);
        registerDaoClass(MappingDao.class);
        registerDaoClass(LanguageDao.class);
    }
    
    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }
    
    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }
    
}
