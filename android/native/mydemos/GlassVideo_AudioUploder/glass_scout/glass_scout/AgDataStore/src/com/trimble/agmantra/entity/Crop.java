package com.trimble.agmantra.entity;

import com.trimble.agmantra.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.trimble.agmantra.dao.CommodityDao;
import com.trimble.agmantra.dao.CropDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table CROP.
 */
public class Crop {

    private Long id;
    private String desc;
    private Boolean isServerdata;
    private String year;
    private Integer status;
    private Long commodityId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient CropDao myDao;

    private Commodity commodity;
    private Long commodity__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Crop() {
    }

    public Crop(Long id) {
        this.id = id;
    }

    public Crop(Long id, String desc, Boolean isServerdata, String year, Integer status, Long commodityId) {
        this.id = id;
        this.desc = desc;
        this.isServerdata = isServerdata;
        this.year = year;
        this.status = status;
        this.commodityId = commodityId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCropDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getDesc() {
        return desc;
    }

    public void setDesc(String desc) {
        this.desc = desc;
    }

    public Boolean getIsServerdata() {
        return isServerdata;
    }

    public void setIsServerdata(Boolean isServerdata) {
        this.isServerdata = isServerdata;
    }

    public String getYear() {
        return year;
    }

    public void setYear(String year) {
        this.year = year;
    }

    public Integer getStatus() {
        return status;
    }

    public void setStatus(Integer status) {
        this.status = status;
    }

    public Long getCommodityId() {
        return commodityId;
    }

    public void setCommodityId(Long commodityId) {
        this.commodityId = commodityId;
    }

    /** To-one relationship, resolved on first access. */
    public Commodity getCommodity() {
        if (commodity__resolvedKey == null || !commodity__resolvedKey.equals(commodityId)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CommodityDao targetDao = daoSession.getCommodityDao();
            commodity = targetDao.load(commodityId);
            commodity__resolvedKey = commodityId;
        }
        return commodity;
    }

    public void setCommodity(Commodity commodity) {
        this.commodity = commodity;
        commodityId = commodity == null ? null : commodity.getId();
        commodity__resolvedKey = commodityId;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
