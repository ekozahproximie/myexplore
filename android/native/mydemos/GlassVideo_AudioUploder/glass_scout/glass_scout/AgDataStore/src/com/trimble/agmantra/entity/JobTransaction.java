package com.trimble.agmantra.entity;

import com.trimble.agmantra.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.trimble.agmantra.dao.FeatureDao;
import com.trimble.agmantra.dao.JobDao;
import com.trimble.agmantra.dao.JobTransactionDao;
import com.trimble.agmantra.dao.TemplateTypeDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table JOB_TRANSACTION.
 */
public class JobTransaction {

    private Long id;
    private Integer status;
    private Integer passid;
    private Integer attrindexId;
    private Long featureId;
    private Long jobId;
    private Long templateTypeId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient JobTransactionDao myDao;

    private TemplateType templateType;
    private Long templateType__resolvedKey;

    private Feature feature;
    private Long feature__resolvedKey;

    private Job job;
    private Long job__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public JobTransaction() {
    }

    public JobTransaction(Long id) {
        this.id = id;
    }

    public JobTransaction(Long id, Integer status, Integer passid, Integer attrindexId, Long featureId, Long jobId, Long templateTypeId) {
        this.id = id;
        this.status = status;
        this.passid = passid;
        this.attrindexId = attrindexId;
        this.featureId = featureId;
        this.jobId = jobId;
        this.templateTypeId = templateTypeId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getJobTransactionDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getStatus() {
        return status;
    }

    public void setStatus(Integer status) {
        this.status = status;
    }

    public Integer getPassid() {
        return passid;
    }

    public void setPassid(Integer passid) {
        this.passid = passid;
    }

    public Integer getAttrindexId() {
        return attrindexId;
    }

    public void setAttrindexId(Integer attrindexId) {
        this.attrindexId = attrindexId;
    }

    public Long getFeatureId() {
        return featureId;
    }

    public void setFeatureId(Long featureId) {
        this.featureId = featureId;
    }

    public Long getJobId() {
        return jobId;
    }

    public void setJobId(Long jobId) {
        this.jobId = jobId;
    }

    public Long getTemplateTypeId() {
        return templateTypeId;
    }

    public void setTemplateTypeId(Long templateTypeId) {
        this.templateTypeId = templateTypeId;
    }

    /** To-one relationship, resolved on first access. */
    public TemplateType getTemplateType() {
        if (templateType__resolvedKey == null || !templateType__resolvedKey.equals(templateTypeId)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TemplateTypeDao targetDao = daoSession.getTemplateTypeDao();
            templateType = targetDao.load(templateTypeId);
            templateType__resolvedKey = templateTypeId;
        }
        return templateType;
    }

    public void setTemplateType(TemplateType templateType) {
        this.templateType = templateType;
        templateTypeId = templateType == null ? null : templateType.getId();
        templateType__resolvedKey = templateTypeId;
    }

    /** To-one relationship, resolved on first access. */
    public Feature getFeature() {
        if (feature__resolvedKey == null || !feature__resolvedKey.equals(featureId)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            FeatureDao targetDao = daoSession.getFeatureDao();
            feature = targetDao.load(featureId);
            feature__resolvedKey = featureId;
        }
        return feature;
    }

    public void setFeature(Feature feature) {
        this.feature = feature;
        featureId = feature == null ? null : feature.getId();
        feature__resolvedKey = featureId;
    }

    /** To-one relationship, resolved on first access. */
    public Job getJob() {
        if (job__resolvedKey == null || !job__resolvedKey.equals(jobId)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            JobDao targetDao = daoSession.getJobDao();
            job = targetDao.load(jobId);
            job__resolvedKey = jobId;
        }
        return job;
    }

    public void setJob(Job job) {
        this.job = job;
        jobId = job == null ? null : job.getId();
        job__resolvedKey = jobId;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
