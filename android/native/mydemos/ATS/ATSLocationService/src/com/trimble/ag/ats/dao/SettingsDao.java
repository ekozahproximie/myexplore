package com.trimble.ag.ats.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.trimble.ag.ats.entity.Settings;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SETTINGS".
*/
public class SettingsDao extends AbstractDao<Settings, String> {

    public static final String TABLENAME = "SETTINGS";

    /**
     * Properties of entity Settings.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property SettingsKey = new Property(0, String.class, "settingsKey", true, "SETTINGS_KEY");
        public final static Property SettingsValue = new Property(1, String.class, "settingsValue", false, "SETTINGS_VALUE");
        public final static Property Type = new Property(2, Long.class, "Type", false, "TYPE");
    };


    public SettingsDao(DaoConfig config) {
        super(config);
    }
    
    public SettingsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SETTINGS\" (" + //
                "\"SETTINGS_KEY\" TEXT PRIMARY KEY NOT NULL ," + // 0: settingsKey
                "\"SETTINGS_VALUE\" TEXT," + // 1: settingsValue
                "\"TYPE\" INTEGER);"); // 2: Type
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SETTINGS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Settings entity) {
        stmt.clearBindings();
 
        String settingsKey = entity.getSettingsKey();
        if (settingsKey != null) {
            stmt.bindString(1, settingsKey);
        }
 
        String settingsValue = entity.getSettingsValue();
        if (settingsValue != null) {
            stmt.bindString(2, settingsValue);
        }
 
        Long Type = entity.getType();
        if (Type != null) {
            stmt.bindLong(3, Type);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Settings readEntity(Cursor cursor, int offset) {
        Settings entity = new Settings( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // settingsKey
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // settingsValue
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2) // Type
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Settings entity, int offset) {
        entity.setSettingsKey(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSettingsValue(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Settings entity, long rowId) {
        return entity.getSettingsKey();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Settings entity) {
        if(entity != null) {
            return entity.getSettingsKey();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
