package com.trimble.ag.ats.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.trimble.ag.ats.entity.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property UserId = new Property(0, Long.class, "UserId", true, "USER_ID");
        public final static Property ServerUserId = new Property(1, Long.class, "serverUserId", false, "SERVER_USER_ID");
        public final static Property UserName = new Property(2, String.class, "userName", false, "USER_NAME");
        public final static Property FirstName = new Property(3, String.class, "firstName", false, "FIRST_NAME");
        public final static Property LastName = new Property(4, String.class, "lastName", false, "LAST_NAME");
        public final static Property ContactID = new Property(5, String.class, "contactID", false, "CONTACT_ID");
        public final static Property Region = new Property(6, String.class, "region", false, "REGION");
        public final static Property Minitourshown = new Property(7, Boolean.class, "minitourshown", false, "MINITOURSHOWN");
        public final static Property OrgId = new Property(8, String.class, "orgId", false, "ORG_ID");
    };

    private DaoSession daoSession;


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"USER_ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: UserId
                "\"SERVER_USER_ID\" INTEGER," + // 1: serverUserId
                "\"USER_NAME\" TEXT," + // 2: userName
                "\"FIRST_NAME\" TEXT," + // 3: firstName
                "\"LAST_NAME\" TEXT," + // 4: lastName
                "\"CONTACT_ID\" TEXT," + // 5: contactID
                "\"REGION\" TEXT," + // 6: region
                "\"MINITOURSHOWN\" INTEGER," + // 7: minitourshown
                "\"ORG_ID\" TEXT NOT NULL );"); // 8: orgId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long UserId = entity.getUserId();
        if (UserId != null) {
            stmt.bindLong(1, UserId);
        }
 
        Long serverUserId = entity.getServerUserId();
        if (serverUserId != null) {
            stmt.bindLong(2, serverUserId);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }
 
        String firstName = entity.getFirstName();
        if (firstName != null) {
            stmt.bindString(4, firstName);
        }
 
        String lastName = entity.getLastName();
        if (lastName != null) {
            stmt.bindString(5, lastName);
        }
 
        String contactID = entity.getContactID();
        if (contactID != null) {
            stmt.bindString(6, contactID);
        }
 
        String region = entity.getRegion();
        if (region != null) {
            stmt.bindString(7, region);
        }
 
        Boolean minitourshown = entity.getMinitourshown();
        if (minitourshown != null) {
            stmt.bindLong(8, minitourshown ? 1L: 0L);
        }
        stmt.bindString(9, entity.getOrgId());
    }

    @Override
    protected void attachEntity(User entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // UserId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // serverUserId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // firstName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // lastName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // contactID
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // region
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // minitourshown
            cursor.getString(offset + 8) // orgId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setUserId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setServerUserId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setUserName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFirstName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLastName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setContactID(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRegion(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMinitourshown(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setOrgId(cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setUserId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getUserId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
