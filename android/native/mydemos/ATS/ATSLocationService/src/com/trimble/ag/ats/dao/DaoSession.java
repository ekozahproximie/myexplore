package com.trimble.ag.ats.dao;

import android.database.sqlite.SQLiteDatabase;

import java.util.Map;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.AbstractDaoSession;
import de.greenrobot.dao.identityscope.IdentityScopeType;
import de.greenrobot.dao.internal.DaoConfig;

import com.trimble.ag.ats.entity.Location;
import com.trimble.ag.ats.entity.Settings;
import com.trimble.ag.ats.entity.Organization;
import com.trimble.ag.ats.entity.User;
import com.trimble.ag.ats.entity.User_Organization;

import com.trimble.ag.ats.dao.LocationDao;
import com.trimble.ag.ats.dao.SettingsDao;
import com.trimble.ag.ats.dao.OrganizationDao;
import com.trimble.ag.ats.dao.UserDao;
import com.trimble.ag.ats.dao.User_OrganizationDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see de.greenrobot.dao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig locationDaoConfig;
    private final DaoConfig settingsDaoConfig;
    private final DaoConfig organizationDaoConfig;
    private final DaoConfig userDaoConfig;
    private final DaoConfig user_OrganizationDaoConfig;

    private final LocationDao locationDao;
    private final SettingsDao settingsDao;
    private final OrganizationDao organizationDao;
    private final UserDao userDao;
    private final User_OrganizationDao user_OrganizationDao;

    public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        locationDaoConfig = daoConfigMap.get(LocationDao.class).clone();
        locationDaoConfig.initIdentityScope(type);

        settingsDaoConfig = daoConfigMap.get(SettingsDao.class).clone();
        settingsDaoConfig.initIdentityScope(type);

        organizationDaoConfig = daoConfigMap.get(OrganizationDao.class).clone();
        organizationDaoConfig.initIdentityScope(type);

        userDaoConfig = daoConfigMap.get(UserDao.class).clone();
        userDaoConfig.initIdentityScope(type);

        user_OrganizationDaoConfig = daoConfigMap.get(User_OrganizationDao.class).clone();
        user_OrganizationDaoConfig.initIdentityScope(type);

        locationDao = new LocationDao(locationDaoConfig, this);
        settingsDao = new SettingsDao(settingsDaoConfig, this);
        organizationDao = new OrganizationDao(organizationDaoConfig, this);
        userDao = new UserDao(userDaoConfig, this);
        user_OrganizationDao = new User_OrganizationDao(user_OrganizationDaoConfig, this);

        registerDao(Location.class, locationDao);
        registerDao(Settings.class, settingsDao);
        registerDao(Organization.class, organizationDao);
        registerDao(User.class, userDao);
        registerDao(User_Organization.class, user_OrganizationDao);
    }
    
    public void clear() {
        locationDaoConfig.getIdentityScope().clear();
        settingsDaoConfig.getIdentityScope().clear();
        organizationDaoConfig.getIdentityScope().clear();
        userDaoConfig.getIdentityScope().clear();
        user_OrganizationDaoConfig.getIdentityScope().clear();
    }

    public LocationDao getLocationDao() {
        return locationDao;
    }

    public SettingsDao getSettingsDao() {
        return settingsDao;
    }

    public OrganizationDao getOrganizationDao() {
        return organizationDao;
    }

    public UserDao getUserDao() {
        return userDao;
    }

    public User_OrganizationDao getUser_OrganizationDao() {
        return user_OrganizationDao;
    }

}
